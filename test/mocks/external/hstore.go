// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/celestiaorg/go-header"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore[H header.Header[H]](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore[H] {
	mock := &MockStore[H]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore[H header.Header[H]] struct {
	mock.Mock
}

type MockStore_Expecter[H header.Header[H]] struct {
	mock *mock.Mock
}

func (_m *MockStore[H]) EXPECT() *MockStore_Expecter[H] {
	return &MockStore_Expecter[H]{mock: &_m.Mock}
}

// Append provides a mock function for the type MockStore
func (_mock *MockStore[H]) Append(context1 context.Context, vs ...H) error {
	// H
	_va := make([]interface{}, len(vs))
	for _i := range vs {
		_va[_i] = vs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, context1)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...H) error); ok {
		r0 = returnFunc(context1, vs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockStore_Append_Call[H header.Header[H]] struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - context1 context.Context
//   - vs ...H
func (_e *MockStore_Expecter[H]) Append(context1 interface{}, vs ...interface{}) *MockStore_Append_Call[H] {
	return &MockStore_Append_Call[H]{Call: _e.mock.On("Append",
		append([]interface{}{context1}, vs...)...)}
}

func (_c *MockStore_Append_Call[H]) Run(run func(context1 context.Context, vs ...H)) *MockStore_Append_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []H
		variadicArgs := make([]H, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(H)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStore_Append_Call[H]) Return(err error) *MockStore_Append_Call[H] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_Append_Call[H]) RunAndReturn(run func(context1 context.Context, vs ...H) error) *MockStore_Append_Call[H] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockStore
func (_mock *MockStore[H]) Get(context1 context.Context, hash header.Hash) (H, error) {
	ret := _mock.Called(context1, hash)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 H
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, header.Hash) (H, error)); ok {
		return returnFunc(context1, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, header.Hash) H); ok {
		r0 = returnFunc(context1, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(H)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, header.Hash) error); ok {
		r1 = returnFunc(context1, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStore_Get_Call[H header.Header[H]] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - hash header.Hash
func (_e *MockStore_Expecter[H]) Get(context1 interface{}, hash interface{}) *MockStore_Get_Call[H] {
	return &MockStore_Get_Call[H]{Call: _e.mock.On("Get", context1, hash)}
}

func (_c *MockStore_Get_Call[H]) Run(run func(context1 context.Context, hash header.Hash)) *MockStore_Get_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 header.Hash
		if args[1] != nil {
			arg1 = args[1].(header.Hash)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_Get_Call[H]) Return(v H, err error) *MockStore_Get_Call[H] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockStore_Get_Call[H]) RunAndReturn(run func(context1 context.Context, hash header.Hash) (H, error)) *MockStore_Get_Call[H] {
	_c.Call.Return(run)
	return _c
}

// GetByHeight provides a mock function for the type MockStore
func (_mock *MockStore[H]) GetByHeight(context1 context.Context, v uint64) (H, error) {
	ret := _mock.Called(context1, v)

	if len(ret) == 0 {
		panic("no return value specified for GetByHeight")
	}

	var r0 H
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) (H, error)); ok {
		return returnFunc(context1, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) H); ok {
		r0 = returnFunc(context1, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(H)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = returnFunc(context1, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByHeight'
type MockStore_GetByHeight_Call[H header.Header[H]] struct {
	*mock.Call
}

// GetByHeight is a helper method to define mock.On call
//   - context1 context.Context
//   - v uint64
func (_e *MockStore_Expecter[H]) GetByHeight(context1 interface{}, v interface{}) *MockStore_GetByHeight_Call[H] {
	return &MockStore_GetByHeight_Call[H]{Call: _e.mock.On("GetByHeight", context1, v)}
}

func (_c *MockStore_GetByHeight_Call[H]) Run(run func(context1 context.Context, v uint64)) *MockStore_GetByHeight_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_GetByHeight_Call[H]) Return(v1 H, err error) *MockStore_GetByHeight_Call[H] {
	_c.Call.Return(v1, err)
	return _c
}

func (_c *MockStore_GetByHeight_Call[H]) RunAndReturn(run func(context1 context.Context, v uint64) (H, error)) *MockStore_GetByHeight_Call[H] {
	_c.Call.Return(run)
	return _c
}

// GetRange provides a mock function for the type MockStore
func (_mock *MockStore[H]) GetRange(context1 context.Context, v uint64, v1 uint64) ([]H, error) {
	ret := _mock.Called(context1, v, v1)

	if len(ret) == 0 {
		panic("no return value specified for GetRange")
	}

	var r0 []H
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]H, error)); ok {
		return returnFunc(context1, v, v1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64, uint64) []H); ok {
		r0 = returnFunc(context1, v, v1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]H)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = returnFunc(context1, v, v1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRange'
type MockStore_GetRange_Call[H header.Header[H]] struct {
	*mock.Call
}

// GetRange is a helper method to define mock.On call
//   - context1 context.Context
//   - v uint64
//   - v1 uint64
func (_e *MockStore_Expecter[H]) GetRange(context1 interface{}, v interface{}, v1 interface{}) *MockStore_GetRange_Call[H] {
	return &MockStore_GetRange_Call[H]{Call: _e.mock.On("GetRange", context1, v, v1)}
}

func (_c *MockStore_GetRange_Call[H]) Run(run func(context1 context.Context, v uint64, v1 uint64)) *MockStore_GetRange_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStore_GetRange_Call[H]) Return(vs []H, err error) *MockStore_GetRange_Call[H] {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockStore_GetRange_Call[H]) RunAndReturn(run func(context1 context.Context, v uint64, v1 uint64) ([]H, error)) *MockStore_GetRange_Call[H] {
	_c.Call.Return(run)
	return _c
}

// GetRangeByHeight provides a mock function for the type MockStore
func (_mock *MockStore[H]) GetRangeByHeight(ctx context.Context, from H, to uint64) ([]H, error) {
	ret := _mock.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetRangeByHeight")
	}

	var r0 []H
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, H, uint64) ([]H, error)); ok {
		return returnFunc(ctx, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, H, uint64) []H); ok {
		r0 = returnFunc(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]H)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, H, uint64) error); ok {
		r1 = returnFunc(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetRangeByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRangeByHeight'
type MockStore_GetRangeByHeight_Call[H header.Header[H]] struct {
	*mock.Call
}

// GetRangeByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - from H
//   - to uint64
func (_e *MockStore_Expecter[H]) GetRangeByHeight(ctx interface{}, from interface{}, to interface{}) *MockStore_GetRangeByHeight_Call[H] {
	return &MockStore_GetRangeByHeight_Call[H]{Call: _e.mock.On("GetRangeByHeight", ctx, from, to)}
}

func (_c *MockStore_GetRangeByHeight_Call[H]) Run(run func(ctx context.Context, from H, to uint64)) *MockStore_GetRangeByHeight_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 H
		if args[1] != nil {
			arg1 = args[1].(H)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStore_GetRangeByHeight_Call[H]) Return(vs []H, err error) *MockStore_GetRangeByHeight_Call[H] {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockStore_GetRangeByHeight_Call[H]) RunAndReturn(run func(ctx context.Context, from H, to uint64) ([]H, error)) *MockStore_GetRangeByHeight_Call[H] {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function for the type MockStore
func (_mock *MockStore[H]) Has(context1 context.Context, hash header.Hash) (bool, error) {
	ret := _mock.Called(context1, hash)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, header.Hash) (bool, error)); ok {
		return returnFunc(context1, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, header.Hash) bool); ok {
		r0 = returnFunc(context1, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, header.Hash) error); ok {
		r1 = returnFunc(context1, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockStore_Has_Call[H header.Header[H]] struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - context1 context.Context
//   - hash header.Hash
func (_e *MockStore_Expecter[H]) Has(context1 interface{}, hash interface{}) *MockStore_Has_Call[H] {
	return &MockStore_Has_Call[H]{Call: _e.mock.On("Has", context1, hash)}
}

func (_c *MockStore_Has_Call[H]) Run(run func(context1 context.Context, hash header.Hash)) *MockStore_Has_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 header.Hash
		if args[1] != nil {
			arg1 = args[1].(header.Hash)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_Has_Call[H]) Return(b bool, err error) *MockStore_Has_Call[H] {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockStore_Has_Call[H]) RunAndReturn(run func(context1 context.Context, hash header.Hash) (bool, error)) *MockStore_Has_Call[H] {
	_c.Call.Return(run)
	return _c
}

// HasAt provides a mock function for the type MockStore
func (_mock *MockStore[H]) HasAt(context1 context.Context, v uint64) bool {
	ret := _mock.Called(context1, v)

	if len(ret) == 0 {
		panic("no return value specified for HasAt")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = returnFunc(context1, v)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockStore_HasAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasAt'
type MockStore_HasAt_Call[H header.Header[H]] struct {
	*mock.Call
}

// HasAt is a helper method to define mock.On call
//   - context1 context.Context
//   - v uint64
func (_e *MockStore_Expecter[H]) HasAt(context1 interface{}, v interface{}) *MockStore_HasAt_Call[H] {
	return &MockStore_HasAt_Call[H]{Call: _e.mock.On("HasAt", context1, v)}
}

func (_c *MockStore_HasAt_Call[H]) Run(run func(context1 context.Context, v uint64)) *MockStore_HasAt_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_HasAt_Call[H]) Return(b bool) *MockStore_HasAt_Call[H] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockStore_HasAt_Call[H]) RunAndReturn(run func(context1 context.Context, v uint64) bool) *MockStore_HasAt_Call[H] {
	_c.Call.Return(run)
	return _c
}

// Head provides a mock function for the type MockStore
func (_mock *MockStore[H]) Head(context1 context.Context, headOptions ...header.HeadOption[H]) (H, error) {
	// header.HeadOption[H]
	_va := make([]interface{}, len(headOptions))
	for _i := range headOptions {
		_va[_i] = headOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, context1)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 H
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...header.HeadOption[H]) (H, error)); ok {
		return returnFunc(context1, headOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...header.HeadOption[H]) H); ok {
		r0 = returnFunc(context1, headOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(H)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...header.HeadOption[H]) error); ok {
		r1 = returnFunc(context1, headOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_Head_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Head'
type MockStore_Head_Call[H header.Header[H]] struct {
	*mock.Call
}

// Head is a helper method to define mock.On call
//   - context1 context.Context
//   - headOptions ...header.HeadOption[H]
func (_e *MockStore_Expecter[H]) Head(context1 interface{}, headOptions ...interface{}) *MockStore_Head_Call[H] {
	return &MockStore_Head_Call[H]{Call: _e.mock.On("Head",
		append([]interface{}{context1}, headOptions...)...)}
}

func (_c *MockStore_Head_Call[H]) Run(run func(context1 context.Context, headOptions ...header.HeadOption[H])) *MockStore_Head_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []header.HeadOption[H]
		variadicArgs := make([]header.HeadOption[H], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(header.HeadOption[H])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStore_Head_Call[H]) Return(v H, err error) *MockStore_Head_Call[H] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockStore_Head_Call[H]) RunAndReturn(run func(context1 context.Context, headOptions ...header.HeadOption[H]) (H, error)) *MockStore_Head_Call[H] {
	_c.Call.Return(run)
	return _c
}

// Height provides a mock function for the type MockStore
func (_mock *MockStore[H]) Height() uint64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Height")
	}

	var r0 uint64
	if returnFunc, ok := ret.Get(0).(func() uint64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint64)
	}
	return r0
}

// MockStore_Height_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Height'
type MockStore_Height_Call[H header.Header[H]] struct {
	*mock.Call
}

// Height is a helper method to define mock.On call
func (_e *MockStore_Expecter[H]) Height() *MockStore_Height_Call[H] {
	return &MockStore_Height_Call[H]{Call: _e.mock.On("Height")}
}

func (_c *MockStore_Height_Call[H]) Run(run func()) *MockStore_Height_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Height_Call[H]) Return(v uint64) *MockStore_Height_Call[H] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockStore_Height_Call[H]) RunAndReturn(run func() uint64) *MockStore_Height_Call[H] {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockStore
func (_mock *MockStore[H]) Init(context1 context.Context, v H) error {
	ret := _mock.Called(context1, v)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, H) error); ok {
		r0 = returnFunc(context1, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockStore_Init_Call[H header.Header[H]] struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - context1 context.Context
//   - v H
func (_e *MockStore_Expecter[H]) Init(context1 interface{}, v interface{}) *MockStore_Init_Call[H] {
	return &MockStore_Init_Call[H]{Call: _e.mock.On("Init", context1, v)}
}

func (_c *MockStore_Init_Call[H]) Run(run func(context1 context.Context, v H)) *MockStore_Init_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 H
		if args[1] != nil {
			arg1 = args[1].(H)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_Init_Call[H]) Return(err error) *MockStore_Init_Call[H] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_Init_Call[H]) RunAndReturn(run func(context1 context.Context, v H) error) *MockStore_Init_Call[H] {
	_c.Call.Return(run)
	return _c
}
