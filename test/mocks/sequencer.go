// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/rollkit/rollkit/core/sequencer"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSequencer creates a new instance of MockSequencer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSequencer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSequencer {
	mock := &MockSequencer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSequencer is an autogenerated mock type for the Sequencer type
type MockSequencer struct {
	mock.Mock
}

type MockSequencer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSequencer) EXPECT() *MockSequencer_Expecter {
	return &MockSequencer_Expecter{mock: &_m.Mock}
}

// GetNextBatch provides a mock function for the type MockSequencer
func (_mock *MockSequencer) GetNextBatch(ctx context.Context, req sequencer.GetNextBatchRequest) (*sequencer.GetNextBatchResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetNextBatch")
	}

	var r0 *sequencer.GetNextBatchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sequencer.GetNextBatchRequest) (*sequencer.GetNextBatchResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sequencer.GetNextBatchRequest) *sequencer.GetNextBatchResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sequencer.GetNextBatchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sequencer.GetNextBatchRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSequencer_GetNextBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextBatch'
type MockSequencer_GetNextBatch_Call struct {
	*mock.Call
}

// GetNextBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - req sequencer.GetNextBatchRequest
func (_e *MockSequencer_Expecter) GetNextBatch(ctx interface{}, req interface{}) *MockSequencer_GetNextBatch_Call {
	return &MockSequencer_GetNextBatch_Call{Call: _e.mock.On("GetNextBatch", ctx, req)}
}

func (_c *MockSequencer_GetNextBatch_Call) Run(run func(ctx context.Context, req sequencer.GetNextBatchRequest)) *MockSequencer_GetNextBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sequencer.GetNextBatchRequest
		if args[1] != nil {
			arg1 = args[1].(sequencer.GetNextBatchRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSequencer_GetNextBatch_Call) Return(getNextBatchResponse *sequencer.GetNextBatchResponse, err error) *MockSequencer_GetNextBatch_Call {
	_c.Call.Return(getNextBatchResponse, err)
	return _c
}

func (_c *MockSequencer_GetNextBatch_Call) RunAndReturn(run func(ctx context.Context, req sequencer.GetNextBatchRequest) (*sequencer.GetNextBatchResponse, error)) *MockSequencer_GetNextBatch_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitBatchTxs provides a mock function for the type MockSequencer
func (_mock *MockSequencer) SubmitBatchTxs(ctx context.Context, req sequencer.SubmitBatchTxsRequest) (*sequencer.SubmitBatchTxsResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SubmitBatchTxs")
	}

	var r0 *sequencer.SubmitBatchTxsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sequencer.SubmitBatchTxsRequest) (*sequencer.SubmitBatchTxsResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sequencer.SubmitBatchTxsRequest) *sequencer.SubmitBatchTxsResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sequencer.SubmitBatchTxsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sequencer.SubmitBatchTxsRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSequencer_SubmitBatchTxs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitBatchTxs'
type MockSequencer_SubmitBatchTxs_Call struct {
	*mock.Call
}

// SubmitBatchTxs is a helper method to define mock.On call
//   - ctx context.Context
//   - req sequencer.SubmitBatchTxsRequest
func (_e *MockSequencer_Expecter) SubmitBatchTxs(ctx interface{}, req interface{}) *MockSequencer_SubmitBatchTxs_Call {
	return &MockSequencer_SubmitBatchTxs_Call{Call: _e.mock.On("SubmitBatchTxs", ctx, req)}
}

func (_c *MockSequencer_SubmitBatchTxs_Call) Run(run func(ctx context.Context, req sequencer.SubmitBatchTxsRequest)) *MockSequencer_SubmitBatchTxs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sequencer.SubmitBatchTxsRequest
		if args[1] != nil {
			arg1 = args[1].(sequencer.SubmitBatchTxsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSequencer_SubmitBatchTxs_Call) Return(submitBatchTxsResponse *sequencer.SubmitBatchTxsResponse, err error) *MockSequencer_SubmitBatchTxs_Call {
	_c.Call.Return(submitBatchTxsResponse, err)
	return _c
}

func (_c *MockSequencer_SubmitBatchTxs_Call) RunAndReturn(run func(ctx context.Context, req sequencer.SubmitBatchTxsRequest) (*sequencer.SubmitBatchTxsResponse, error)) *MockSequencer_SubmitBatchTxs_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyBatch provides a mock function for the type MockSequencer
func (_mock *MockSequencer) VerifyBatch(ctx context.Context, req sequencer.VerifyBatchRequest) (*sequencer.VerifyBatchResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyBatch")
	}

	var r0 *sequencer.VerifyBatchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sequencer.VerifyBatchRequest) (*sequencer.VerifyBatchResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sequencer.VerifyBatchRequest) *sequencer.VerifyBatchResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sequencer.VerifyBatchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sequencer.VerifyBatchRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSequencer_VerifyBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyBatch'
type MockSequencer_VerifyBatch_Call struct {
	*mock.Call
}

// VerifyBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - req sequencer.VerifyBatchRequest
func (_e *MockSequencer_Expecter) VerifyBatch(ctx interface{}, req interface{}) *MockSequencer_VerifyBatch_Call {
	return &MockSequencer_VerifyBatch_Call{Call: _e.mock.On("VerifyBatch", ctx, req)}
}

func (_c *MockSequencer_VerifyBatch_Call) Run(run func(ctx context.Context, req sequencer.VerifyBatchRequest)) *MockSequencer_VerifyBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sequencer.VerifyBatchRequest
		if args[1] != nil {
			arg1 = args[1].(sequencer.VerifyBatchRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSequencer_VerifyBatch_Call) Return(verifyBatchResponse *sequencer.VerifyBatchResponse, err error) *MockSequencer_VerifyBatch_Call {
	_c.Call.Return(verifyBatchResponse, err)
	return _c
}

func (_c *MockSequencer_VerifyBatch_Call) RunAndReturn(run func(ctx context.Context, req sequencer.VerifyBatchRequest) (*sequencer.VerifyBatchResponse, error)) *MockSequencer_VerifyBatch_Call {
	_c.Call.Return(run)
	return _c
}
