// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: rollkit/v1/p2p_rpc.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetPeerInfoResponse defines the response for retrieving peer information
type GetPeerInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of connected peers
	Peers         []*PeerInfo `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeerInfoResponse) Reset() {
	*x = GetPeerInfoResponse{}
	mi := &file_rollkit_v1_p2p_rpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerInfoResponse) ProtoMessage() {}

func (x *GetPeerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rollkit_v1_p2p_rpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPeerInfoResponse) Descriptor() ([]byte, []int) {
	return file_rollkit_v1_p2p_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *GetPeerInfoResponse) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

// GetNetInfoResponse defines the response for retrieving network information
type GetNetInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network information
	NetInfo       *NetInfo `protobuf:"bytes,1,opt,name=net_info,json=netInfo,proto3" json:"net_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetInfoResponse) Reset() {
	*x = GetNetInfoResponse{}
	mi := &file_rollkit_v1_p2p_rpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetInfoResponse) ProtoMessage() {}

func (x *GetNetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rollkit_v1_p2p_rpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetNetInfoResponse) Descriptor() ([]byte, []int) {
	return file_rollkit_v1_p2p_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetNetInfoResponse) GetNetInfo() *NetInfo {
	if x != nil {
		return x.NetInfo
	}
	return nil
}

// PeerInfo contains information about a connected peer
type PeerInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Peer ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Peer address
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	mi := &file_rollkit_v1_p2p_rpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rollkit_v1_p2p_rpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_rollkit_v1_p2p_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *PeerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PeerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// NetInfo contains information about the network
type NetInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Listen address
	ListenAddresses []string `protobuf:"bytes,2,rep,name=listen_addresses,json=listenAddresses,proto3" json:"listen_addresses,omitempty"`
	// List of connected peers
	ConnectedPeers []string `protobuf:"bytes,3,rep,name=connected_peers,json=connectedPeers,proto3" json:"connected_peers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NetInfo) Reset() {
	*x = NetInfo{}
	mi := &file_rollkit_v1_p2p_rpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInfo) ProtoMessage() {}

func (x *NetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rollkit_v1_p2p_rpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInfo.ProtoReflect.Descriptor instead.
func (*NetInfo) Descriptor() ([]byte, []int) {
	return file_rollkit_v1_p2p_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *NetInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetInfo) GetListenAddresses() []string {
	if x != nil {
		return x.ListenAddresses
	}
	return nil
}

func (x *NetInfo) GetConnectedPeers() []string {
	if x != nil {
		return x.ConnectedPeers
	}
	return nil
}

var File_rollkit_v1_p2p_rpc_proto protoreflect.FileDescriptor

const file_rollkit_v1_p2p_rpc_proto_rawDesc = "" +
	"\n" +
	"\x18rollkit/v1/p2p_rpc.proto\x12\n" +
	"rollkit.v1\x1a\x1bgoogle/protobuf/empty.proto\x1a\x18rollkit/v1/rollkit.proto\x1a\x16rollkit/v1/state.proto\"A\n" +
	"\x13GetPeerInfoResponse\x12*\n" +
	"\x05peers\x18\x01 \x03(\v2\x14.rollkit.v1.PeerInfoR\x05peers\"D\n" +
	"\x12GetNetInfoResponse\x12.\n" +
	"\bnet_info\x18\x01 \x01(\v2\x13.rollkit.v1.NetInfoR\anetInfo\"4\n" +
	"\bPeerInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\"m\n" +
	"\aNetInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12)\n" +
	"\x10listen_addresses\x18\x02 \x03(\tR\x0flistenAddresses\x12'\n" +
	"\x0fconnected_peers\x18\x03 \x03(\tR\x0econnectedPeers2\x9e\x01\n" +
	"\n" +
	"P2PService\x12H\n" +
	"\vGetPeerInfo\x12\x16.google.protobuf.Empty\x1a\x1f.rollkit.v1.GetPeerInfoResponse\"\x00\x12F\n" +
	"\n" +
	"GetNetInfo\x12\x16.google.protobuf.Empty\x1a\x1e.rollkit.v1.GetNetInfoResponse\"\x00B0Z.github.com/rollkit/rollkit/types/pb/rollkit/v1b\x06proto3"

var (
	file_rollkit_v1_p2p_rpc_proto_rawDescOnce sync.Once
	file_rollkit_v1_p2p_rpc_proto_rawDescData []byte
)

func file_rollkit_v1_p2p_rpc_proto_rawDescGZIP() []byte {
	file_rollkit_v1_p2p_rpc_proto_rawDescOnce.Do(func() {
		file_rollkit_v1_p2p_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rollkit_v1_p2p_rpc_proto_rawDesc), len(file_rollkit_v1_p2p_rpc_proto_rawDesc)))
	})
	return file_rollkit_v1_p2p_rpc_proto_rawDescData
}

var file_rollkit_v1_p2p_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_rollkit_v1_p2p_rpc_proto_goTypes = []any{
	(*GetPeerInfoResponse)(nil), // 0: rollkit.v1.GetPeerInfoResponse
	(*GetNetInfoResponse)(nil),  // 1: rollkit.v1.GetNetInfoResponse
	(*PeerInfo)(nil),            // 2: rollkit.v1.PeerInfo
	(*NetInfo)(nil),             // 3: rollkit.v1.NetInfo
	(*emptypb.Empty)(nil),       // 4: google.protobuf.Empty
}
var file_rollkit_v1_p2p_rpc_proto_depIdxs = []int32{
	2, // 0: rollkit.v1.GetPeerInfoResponse.peers:type_name -> rollkit.v1.PeerInfo
	3, // 1: rollkit.v1.GetNetInfoResponse.net_info:type_name -> rollkit.v1.NetInfo
	4, // 2: rollkit.v1.P2PService.GetPeerInfo:input_type -> google.protobuf.Empty
	4, // 3: rollkit.v1.P2PService.GetNetInfo:input_type -> google.protobuf.Empty
	0, // 4: rollkit.v1.P2PService.GetPeerInfo:output_type -> rollkit.v1.GetPeerInfoResponse
	1, // 5: rollkit.v1.P2PService.GetNetInfo:output_type -> rollkit.v1.GetNetInfoResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_rollkit_v1_p2p_rpc_proto_init() }
func file_rollkit_v1_p2p_rpc_proto_init() {
	if File_rollkit_v1_p2p_rpc_proto != nil {
		return
	}
	file_rollkit_v1_rollkit_proto_init()
	file_rollkit_v1_state_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rollkit_v1_p2p_rpc_proto_rawDesc), len(file_rollkit_v1_p2p_rpc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rollkit_v1_p2p_rpc_proto_goTypes,
		DependencyIndexes: file_rollkit_v1_p2p_rpc_proto_depIdxs,
		MessageInfos:      file_rollkit_v1_p2p_rpc_proto_msgTypes,
	}.Build()
	File_rollkit_v1_p2p_rpc_proto = out.File
	file_rollkit_v1_p2p_rpc_proto_goTypes = nil
	file_rollkit_v1_p2p_rpc_proto_depIdxs = nil
}
