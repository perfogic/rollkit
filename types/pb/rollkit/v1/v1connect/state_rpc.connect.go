// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rollkit/v1/state_rpc.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rollkit/rollkit/types/pb/rollkit/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoreServiceName is the fully-qualified name of the StoreService service.
	StoreServiceName = "rollkit.v1.StoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoreServiceGetBlockProcedure is the fully-qualified name of the StoreService's GetBlock RPC.
	StoreServiceGetBlockProcedure = "/rollkit.v1.StoreService/GetBlock"
	// StoreServiceGetStateProcedure is the fully-qualified name of the StoreService's GetState RPC.
	StoreServiceGetStateProcedure = "/rollkit.v1.StoreService/GetState"
	// StoreServiceGetMetadataProcedure is the fully-qualified name of the StoreService's GetMetadata
	// RPC.
	StoreServiceGetMetadataProcedure = "/rollkit.v1.StoreService/GetMetadata"
	// StoreServiceListMetadataKeysProcedure is the fully-qualified name of the StoreService's
	// ListMetadataKeys RPC.
	StoreServiceListMetadataKeysProcedure = "/rollkit.v1.StoreService/ListMetadataKeys"
	// StoreServiceGetAllMetadataProcedure is the fully-qualified name of the StoreService's
	// GetAllMetadata RPC.
	StoreServiceGetAllMetadataProcedure = "/rollkit.v1.StoreService/GetAllMetadata"
)

// StoreServiceClient is a client for the rollkit.v1.StoreService service.
type StoreServiceClient interface {
	// GetBlock returns a block by height or hash
	GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error)
	// GetState returns the current state
	GetState(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStateResponse], error)
	// GetMetadata returns metadata for a specific key
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
	// ListMetadataKeys returns all available metadata keys with descriptions
	ListMetadataKeys(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListMetadataKeysResponse], error)
	// GetAllMetadata returns all node metadata at once
	GetAllMetadata(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetAllMetadataResponse], error)
}

// NewStoreServiceClient constructs a client for the rollkit.v1.StoreService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storeServiceMethods := v1.File_rollkit_v1_state_rpc_proto.Services().ByName("StoreService").Methods()
	return &storeServiceClient{
		getBlock: connect.NewClient[v1.GetBlockRequest, v1.GetBlockResponse](
			httpClient,
			baseURL+StoreServiceGetBlockProcedure,
			connect.WithSchema(storeServiceMethods.ByName("GetBlock")),
			connect.WithClientOptions(opts...),
		),
		getState: connect.NewClient[emptypb.Empty, v1.GetStateResponse](
			httpClient,
			baseURL+StoreServiceGetStateProcedure,
			connect.WithSchema(storeServiceMethods.ByName("GetState")),
			connect.WithClientOptions(opts...),
		),
		getMetadata: connect.NewClient[v1.GetMetadataRequest, v1.GetMetadataResponse](
			httpClient,
			baseURL+StoreServiceGetMetadataProcedure,
			connect.WithSchema(storeServiceMethods.ByName("GetMetadata")),
			connect.WithClientOptions(opts...),
		),
		listMetadataKeys: connect.NewClient[emptypb.Empty, v1.ListMetadataKeysResponse](
			httpClient,
			baseURL+StoreServiceListMetadataKeysProcedure,
			connect.WithSchema(storeServiceMethods.ByName("ListMetadataKeys")),
			connect.WithClientOptions(opts...),
		),
		getAllMetadata: connect.NewClient[emptypb.Empty, v1.GetAllMetadataResponse](
			httpClient,
			baseURL+StoreServiceGetAllMetadataProcedure,
			connect.WithSchema(storeServiceMethods.ByName("GetAllMetadata")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storeServiceClient implements StoreServiceClient.
type storeServiceClient struct {
	getBlock         *connect.Client[v1.GetBlockRequest, v1.GetBlockResponse]
	getState         *connect.Client[emptypb.Empty, v1.GetStateResponse]
	getMetadata      *connect.Client[v1.GetMetadataRequest, v1.GetMetadataResponse]
	listMetadataKeys *connect.Client[emptypb.Empty, v1.ListMetadataKeysResponse]
	getAllMetadata   *connect.Client[emptypb.Empty, v1.GetAllMetadataResponse]
}

// GetBlock calls rollkit.v1.StoreService.GetBlock.
func (c *storeServiceClient) GetBlock(ctx context.Context, req *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error) {
	return c.getBlock.CallUnary(ctx, req)
}

// GetState calls rollkit.v1.StoreService.GetState.
func (c *storeServiceClient) GetState(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStateResponse], error) {
	return c.getState.CallUnary(ctx, req)
}

// GetMetadata calls rollkit.v1.StoreService.GetMetadata.
func (c *storeServiceClient) GetMetadata(ctx context.Context, req *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return c.getMetadata.CallUnary(ctx, req)
}

// ListMetadataKeys calls rollkit.v1.StoreService.ListMetadataKeys.
func (c *storeServiceClient) ListMetadataKeys(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListMetadataKeysResponse], error) {
	return c.listMetadataKeys.CallUnary(ctx, req)
}

// GetAllMetadata calls rollkit.v1.StoreService.GetAllMetadata.
func (c *storeServiceClient) GetAllMetadata(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetAllMetadataResponse], error) {
	return c.getAllMetadata.CallUnary(ctx, req)
}

// StoreServiceHandler is an implementation of the rollkit.v1.StoreService service.
type StoreServiceHandler interface {
	// GetBlock returns a block by height or hash
	GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error)
	// GetState returns the current state
	GetState(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStateResponse], error)
	// GetMetadata returns metadata for a specific key
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
	// ListMetadataKeys returns all available metadata keys with descriptions
	ListMetadataKeys(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListMetadataKeysResponse], error)
	// GetAllMetadata returns all node metadata at once
	GetAllMetadata(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetAllMetadataResponse], error)
}

// NewStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoreServiceHandler(svc StoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storeServiceMethods := v1.File_rollkit_v1_state_rpc_proto.Services().ByName("StoreService").Methods()
	storeServiceGetBlockHandler := connect.NewUnaryHandler(
		StoreServiceGetBlockProcedure,
		svc.GetBlock,
		connect.WithSchema(storeServiceMethods.ByName("GetBlock")),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetStateHandler := connect.NewUnaryHandler(
		StoreServiceGetStateProcedure,
		svc.GetState,
		connect.WithSchema(storeServiceMethods.ByName("GetState")),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetMetadataHandler := connect.NewUnaryHandler(
		StoreServiceGetMetadataProcedure,
		svc.GetMetadata,
		connect.WithSchema(storeServiceMethods.ByName("GetMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceListMetadataKeysHandler := connect.NewUnaryHandler(
		StoreServiceListMetadataKeysProcedure,
		svc.ListMetadataKeys,
		connect.WithSchema(storeServiceMethods.ByName("ListMetadataKeys")),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetAllMetadataHandler := connect.NewUnaryHandler(
		StoreServiceGetAllMetadataProcedure,
		svc.GetAllMetadata,
		connect.WithSchema(storeServiceMethods.ByName("GetAllMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	return "/rollkit.v1.StoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoreServiceGetBlockProcedure:
			storeServiceGetBlockHandler.ServeHTTP(w, r)
		case StoreServiceGetStateProcedure:
			storeServiceGetStateHandler.ServeHTTP(w, r)
		case StoreServiceGetMetadataProcedure:
			storeServiceGetMetadataHandler.ServeHTTP(w, r)
		case StoreServiceListMetadataKeysProcedure:
			storeServiceListMetadataKeysHandler.ServeHTTP(w, r)
		case StoreServiceGetAllMetadataProcedure:
			storeServiceGetAllMetadataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoreServiceHandler struct{}

func (UnimplementedStoreServiceHandler) GetBlock(context.Context, *connect.Request[v1.GetBlockRequest]) (*connect.Response[v1.GetBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.StoreService.GetBlock is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetState(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.StoreService.GetState is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.StoreService.GetMetadata is not implemented"))
}

func (UnimplementedStoreServiceHandler) ListMetadataKeys(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListMetadataKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.StoreService.ListMetadataKeys is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetAllMetadata(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetAllMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.StoreService.GetAllMetadata is not implemented"))
}
